server:
  port: 10100
spring:
  application:
    name: gateway-service
  cloud:
    loadbalancer:
      retry:
        enabled: true # 开启Spring Cloud的重试功能，引入spring-retry
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss #LocalDateTimeFormatConfig类中定义的，只是解决pojo类与数据库的时间类型映射，这里配置的是response返回时的映射，两个都需要存在
  #    default-property-inclusion: non_null #设置在序列化的时候，去掉返回为null的字段，那么有时候就会返回少字段了，注意与下面的mybatis plus中的call-setters-on-nulls: true的区别
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/baba?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver
    hikari:
      idle-timeout: 60000
      maximum-pool-size: 30
      minimum-idle: 10
#    druid: #采用上面默认的连接池
#      initial-size: 5
#      min-idle: 5
#      max-active: 20
#      max-wait: 1000
#      test-on-borrow: true
zuul:
  prefix: /api # 添加路由前缀
  retryable: true #是否开启重试
  routes:
#    user-service: # 这里是路由id，随意写
#      path: /user-service/** # 这里是映射路径
#      url: http://127.0.0.1:8081 # 映射路径对应的实际url地址  这种指定ip，就不需要通过eureka
#    下面这种为常规写法
#        user-service: # 这里是路由id，随意写
#          path: /user-service/** # 这里是映射路径
#          serviceId: user-service # 指定服务名称 直接指定服务名，需要通过eureka
#    下面这些为简写形式，注意需要结合eureka来自动转发到服务实例才可以
#        item-service: /item/**
#        search-service: /search/**
    user-service: /user/**
#    auth-service: /auth/**
  add-host-header: true #携带请求本身的head头信息
  sensitive-headers: #匹配禁止使用的头信息，这里设置为null，否则set-cookie无效
  ignored-services:
    - upload-service # 忽略upload-service服务
mybatis-plus:
  mapper-locations: classpath:mapper/*Mapper.xml # 扫描自定义xml文件路径
  configuration:
    #map-underscore-to-camel-case: true #配置驼峰命名规则，暂时未用到
    call-setters-on-nulls: true #解决自定义sql返回Map结果，Mybatis plus自动过滤null值属性的问题，就是在mapper.xml文件中自定义sql，如果返回HashMap类型的结果集，会把null属性去掉的问题
  global-config:
    db-config:
      logic-delete-field: deleted  #全局逻辑删除字段值 3.3.0开始支持
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
      #field-strategy: not-null #我暂时没遇到空值更新的问题，等遇到了，再放开
eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:10010/eureka
    register-with-eureka: true # 是否注册自己的信息到EurekaServer，默认是true,默认肯定要将自己注册至eureka，否则怎么服务注册与发现啊
    fetch-registry: true #是否拉取其它服务的信息，默认是true,一般是不用配置的
    registry-fetch-interval-seconds: 5 #当服务消费者启动是，会检测`eureka.client.fetch-registry=true`参数的值，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地。并且`每隔30秒`会重新获取并更新数据,可以让我们的资源快速更新，开发阶段，可以这么干,生产环境中，我们不需要修改这个值。但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小一点
  instance:
    prefer-ip-address: true # 当调用getHostname获取实例的hostname时，返回ip而不是host名称
    ip-address: 127.0.0.1 # 指定自己的ip信息，不指定的话会自己寻找
    #    instance-id: ${eureka.instance.ip-address}.${server.port} #instance-id属性修改可在eureka控制台上，看到此此自定义的名称，如： PS-1:user-service:10012 , PS-1:user-service:10019
    lease-renewal-interval-in-seconds: 3 # 3秒一次心跳 ,服务续约(renew)的间隔，默认为30秒,开发阶段配置此参数，生产环境注掉此参数，保持默认即可
    lease-expiration-duration-in-seconds: 10 # 10秒即过期，服务失效时间，默认值90秒,开发阶段配置此参数，生产环境注掉此参数，保持默认即可
ribbon:
  ConnectTimeout: 250 # 连接超时时间(ms)
  ReadTimeout: 1000 # 通信超时时间(ms)
  OkToRetryOnAllOperations: true # 是否对所有操作重试
  MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数
  MaxAutoRetries: 1 # 同一实例的重试次数
#logging:
#  level:
#    com.baba: debug #通过`logging.level.xx=debug`来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为`@FeignClient`注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。1）设置com.leyou包下的日志级别都为debug  2)编写配置类，定义日志级别@Configuration public class FeignConfig {
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 6000 #虽然熔断实现了，但是我们的重试机制似乎没有生效，是这样吗？其实这里是因为我们的Ribbon超时时间设置的是1000ms:而Hystix的超时时间默认也是1000ms，因此重试机制没有被触发，而是先触发了熔断。 所以，Ribbon的超时时间一定要小于Hystix的超时时间。